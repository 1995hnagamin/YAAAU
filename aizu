#!/usr/bin/python
# -*- coding: utf-8 -*-

import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.Utils import formatdate
from aojtools.submit import *
from aojtools import api
from os.path import *
import argparse
import htmlentitydefs
import ConfigParser
import getpass

def prompt(message):
    def func():
        print message,
        return raw_input()

    return func

def pass_prompt(message):
    def func():
        return getpass.getpass(prompt=message)
    
    return func


class SpinachConfigParser:
    def __init__(self, filepath):
        self.config = ConfigParser.SafeConfigParser()
        self.config.read(expanduser(filepath))
    
    def get(self, section, option, default):
        if self.config.has_option(section, option):
            return self.config.get(section, option)
        else:
            return default()

    def getspinach(self, section, option, message):
        return self.get(section, option, prompt(message))

    def getpass(self, section, option, message):
        return self.get(section, option, pass_prompt(message))


def submit_code(code, problem_id, config):
    user_id = config.getspinach('AOJ', 'id', 'Enter AOJ ID:')
    password = config.getpass('AOJ', 'pass', 'Enter AOJ Password:')
    info = {
            'user_id': user_id,
            'password': password,
            'code': code['body'],
            'problem_id': int(problem_id),
            'lang': code['lang']
            }
    print 'Problem ID: ' + problem_id
    print 'language: ' + code['lang']
    print 'Submitting solution to AOJ...'

    response = submit(info)
    return response


def ext2lang(ext):
    if ext == '.cc':
        lang = 'C++'
    elif ext == '.java':
        lang = 'JAVA'
    elif ext == '.c':
        lang = 'C'
    else:
        lang = ''

    return lang


def read_code(filename):
    f = open(filename)
    code = f.read()

    root, ext = splitext(filename)
    lang = ext2lang(ext)

    info = {
            'body': code,
            'lang': lang
            }

    return info


def create_html_message(from_addr, to_addr, subject, html):
    body = MIMEText(html, 'html')

    msg = MIMEMultipart('alternative')
    msg['Subject'] = subject
    msg['From'] = from_addr
    msg['To'] = to_addr
    msg['Date'] = formatdate()
    msg.attach(body)

    return msg


def connect_smtp(url, port):
    print 'Connecting with %s:%s...' % (url, port)
    s = smtplib.SMTP(url, port)
    s.ehlo()
    s.starttls()
    s.ehlo()
    return s


def login_smtp(smtp, userid, password):
    print 'Logging in as "' + userid + '"...'
    smtp.login(userid, password)
    return smtp


def send_mail_smtp(smtp, from_addr, to_addr, msg):
    print 'Sending e-mail...'
    smtp.sendmail(from_addr, to_addr, msg.as_string())
    smtp.quit()


def manage_html_message(config, html, r):
    smtp_url = config.getspinach('Gmail', 'url', 'Enter SMTP URL:')
    smtp_port = config.getspinach('Gmail', 'port', 'Enter SMTP Port:')
    s = connect_smtp(smtp_url, smtp_port)

    smtp_id = config.getspinach('Gmail', 'id', 'Enter Gmail address:')
    smtp_pass = config.getpass('Gmail', 'pass', 'Enter Gmail Password:')
    s = login_smtp(s, smtp_id, smtp_pass)

    to_addr = config.getspinach('Evernote', 'address', 'Enter Evernote mailaddress:')
    
    subject = create_subject(r, config)

    msg = create_html_message(smtp_id, to_addr, subject, html)
    send_mail_smtp(s, smtp_id, [to_addr], msg)


def html_table_row(title, data):
    return '<tr><td>' + title + '</td><td>' + data + '</td></tr>'


def html_a(uri, content):
    return '<a href="' + uri + '">' + content + '</a>'


def html_color(color, content):
    return '<span style="font-weight:bold;color:' + color + ';">' + content + '</span>'


def html_judge_status(s):
    if s == 'Accepted':
        return html_color('Green', s)
    elif s == 'Wrong Answer':
        return html_color('Red', s)
    elif s == 'Time Limit Exceeded' or s == 'Memory Limit Exceeded' or s == 'Output Limit Exceeded':
        return html_color('Yellow', s)
    elif s == 'Runtime Error' or s == 'Presentation Error':
        return html_color('PaleVioletRed', s)
    else:
        return html_color('DarkGray', s)


def code2html(code):
    def f(n):
        h = htmlentitydefs.codepoint2name
        if n in h:
            return "&%s;" % h[n]
        elif n < 256:
            return unichr(n)
        else:
            return "&%d;" % n
    return "".join(f(ord(c)) for c in code)

def create_subject(r, config):
    subject = ''
    subject += '(' + r['status'] + ') '
    subject += 'New Submission for Problem ' + str(r['problem_id']) + ' '
    subject += '#' + config.getspinach('Evernote', 'tag', 'Enter Evernote Tag:') + ' '
    subject += '@' + config.getspinach('Evernote', 'notebook', 'Enter Evernote Notebook:')

    return subject

def create_judge_detail(code, response):
    body = '<html><head></head><body>'
    body += '<p><table border="0">'

    rid = response['run_id']
    rlink = html_a('http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=' + str(rid), str(rid))
    body += html_table_row('RID', rlink)

    pid = str(response['problem_id'])
    ptable = api.problem(id=pid)
    plink = html_a('http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=' + pid, pid + ': ' + ptable['name'])
    body += html_table_row('Problem', plink)

    date = response['submission_date_str']
    body += html_table_row('Submission Date', date)
    
    judge = response['status']
    body += html_table_row('Status', html_judge_status(judge))

    time = response['cputime']
    body += html_table_row('Time', str(time))

    memory = response['memory']
    body += html_table_row('Memory', str(memory))

    lang = response['language']
    body += html_table_row('Language', lang)

    size = response['code_size']
    body += html_table_row('Code Size', str(size))

    body += '</table></p>'

    body += '<p><pre><code>'
    body += code2html(code)

    body += '</code></pre></p></body></html>'

    return body


def aoj_submit(args):
    config = SpinachConfigParser('~/.yaau')

    filename = args.filename
    problem_id = args.problem

    code = read_code(filename)
    if args.language:
        code['lang'] = args.language

    r = submit_code(code, problem_id, config)

    print r['status']
    print 'TIME:' + str(r['cputime']) + ', MEMORY:' + str(r['memory'])

    html = create_judge_detail(code['body'], r)

    manage_html_message(config, html, r)


def aoj_help(args):
    print """\
YAAU v0.0 - Yet Another AOJ Utilities
usage: aizu <subcommands>

available subcommands are:
    help\tshow help
    submit\tsubmit solution file to AOJ
"""


parser = argparse.ArgumentParser(description='Yet Another AOJ Utilities')
subparsers = parser.add_subparsers(help='help', title='subcommands')

parser_submit = subparsers.add_parser('submit', help='submit solution file to AOJ')
parser_submit.add_argument('filename', help='filename of solution')
parser_submit.add_argument('-p', '--problem', required=True, help='problem ID (required)')
parser_submit.add_argument('-l', '--language', help='programming language')
parser_submit.set_defaults(func=aoj_submit)

parser_help = subparsers.add_parser('help', help='show help and exit')
parser_help.set_defaults(func=aoj_help)

parser.add_argument('-v', '--version', action='version', version='YAAU v0.0')

args = parser.parse_args()
args.func(args)
